apiVersion: v1
kind: ConfigMap
metadata:
  name: fabric-connection-config
  namespace: fabric-network
  labels:
    app: fabric-network
    component: config
data:
  # Org1 连接配置
  connection-org1.json: |
    {
      "name": "fabric-network-org1",
      "version": "1.0.0",
      "client": {
        "organization": "Org1",
        "connection": {
          "timeout": {
            "peer": {
              "endorser": "300"
            },
            "orderer": "300"
          }
        }
      },
      "organizations": {
        "Org1": {
          "mspid": "Org1MSP",
          "peers": [
            "peer0.org1.example.com"
          ],
          "certificateAuthorities": [
            "ca.org1.example.com"
          ]
        }
      },
      "orderers": {
        "orderer.example.com": {
          "url": "grpcs://fabric-orderer:7050",
          "tlsCACerts": {
            "pem": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----"
          },
          "grpcOptions": {
            "ssl-target-name-override": "orderer.example.com",
            "hostnameOverride": "orderer.example.com"
          }
        }
      },
      "peers": {
        "peer0.org1.example.com": {
          "url": "grpcs://fabric-peer-org1:7051",
          "tlsCACerts": {
            "pem": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----"
          },
          "grpcOptions": {
            "ssl-target-name-override": "peer0.org1.example.com",
            "hostnameOverride": "peer0.org1.example.com"
          }
        }
      },
      "certificateAuthorities": {
        "ca.org1.example.com": {
          "url": "https://fabric-ca-org1:7054",
          "caName": "ca-org1",
          "tlsCACerts": {
            "pem": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----"
          },
          "httpOptions": {
            "verify": false
          }
        }
      },
      "channels": {
        "mychannel": {
          "orderers": [
            "orderer.example.com"
          ],
          "peers": {
            "peer0.org1.example.com": {
              "endorsingPeer": true,
              "chaincodeQuery": true,
              "ledgerQuery": true,
              "eventSource": true
            }
          }
        }
      }
    }

  # Org2 连接配置
  connection-org2.json: |
    {
      "name": "fabric-network-org2",
      "version": "1.0.0",
      "client": {
        "organization": "Org2",
        "connection": {
          "timeout": {
            "peer": {
              "endorser": "300"
            },
            "orderer": "300"
          }
        }
      },
      "organizations": {
        "Org2": {
          "mspid": "Org2MSP",
          "peers": [
            "peer0.org2.example.com"
          ],
          "certificateAuthorities": [
            "ca.org2.example.com"
          ]
        }
      },
      "orderers": {
        "orderer.example.com": {
          "url": "grpcs://fabric-orderer:7050",
          "tlsCACerts": {
            "pem": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----"
          },
          "grpcOptions": {
            "ssl-target-name-override": "orderer.example.com",
            "hostnameOverride": "orderer.example.com"
          }
        }
      },
      "peers": {
        "peer0.org2.example.com": {
          "url": "grpcs://fabric-peer-org2:9051",
          "tlsCACerts": {
            "pem": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----"
          },
          "grpcOptions": {
            "ssl-target-name-override": "peer0.org2.example.com",
            "hostnameOverride": "peer0.org2.example.com"
          }
        }
      },
      "certificateAuthorities": {
        "ca.org2.example.com": {
          "url": "https://fabric-ca-org2:8054",
          "caName": "ca-org2",
          "tlsCACerts": {
            "pem": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----"
          },
          "httpOptions": {
            "verify": false
          }
        }
      },
      "channels": {
        "mychannel": {
          "orderers": [
            "orderer.example.com"
          ],
          "peers": {
            "peer0.org2.example.com": {
              "endorsingPeer": true,
              "chaincodeQuery": true,
              "ledgerQuery": true,
              "eventSource": true
            }
          }
        }
      }
    }

  # Fabric 网络配置
  fabric-config.yaml: |
    network:
      name: "blockchain-emr-network"
      version: "1.0.0"
      description: "区块链电子病历共享系统网络"
    
    channel:
      name: "mychannel"
      profile: "TwoOrgsChannel"
    
    chaincode:
      name: "basic"
      version: "1.0"
      path: "../chaincode/basic"
      language: "golang"
    
    organizations:
      - name: "Org1"
        mspid: "Org1MSP"
        domain: "org1.example.com"
        peers:
          - name: "peer0"
            port: 7051
        ca:
          name: "ca-org1"
          port: 7054
      
      - name: "Org2"
        mspid: "Org2MSP"
        domain: "org2.example.com"
        peers:
          - name: "peer0"
            port: 9051
        ca:
          name: "ca-org2"
          port: 8054
    
    orderer:
      name: "orderer"
      domain: "example.com"
      port: 7050
      type: "solo"
    
    security:
      tls:
        enabled: true
        clientAuthRequired: false
      
      ca:
        keystore: "/etc/hyperledger/fabric-ca-server-config"
        certfile: "/etc/hyperledger/fabric-ca-server-config/ca-cert.pem"
        keyfile: "/etc/hyperledger/fabric-ca-server-config/ca-key.pem"
    
    performance:
      batchTimeout: "2s"
      maxMessageCount: 10
      absoluteMaxBytes: "99 MB"
      preferredMaxBytes: "512 KB"
    
    logging:
      level: "INFO"
      format: "json"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fabric-scripts
  namespace: fabric-network
  labels:
    app: fabric-network
    component: scripts
data:
  # 网络初始化脚本
  init-network.sh: |
    #!/bin/bash
    set -e
    
    echo "初始化 Hyperledger Fabric 网络..."
    
    # 等待所有组件启动
    echo "等待 Fabric 组件启动..."
    sleep 30
    
    # 检查 Orderer 状态
    echo "检查 Orderer 状态..."
    peer channel list --orderer fabric-orderer:7050 --tls --cafile /etc/hyperledger/fabric/tls/ca.crt
    
    # 创建通道（如果不存在）
    echo "创建通道 mychannel..."
    peer channel create -o fabric-orderer:7050 -c mychannel -f /etc/hyperledger/fabric/channel-artifacts/channel.tx --tls --cafile /etc/hyperledger/fabric/tls/ca.crt || echo "通道可能已存在"
    
    # 加入通道
    echo "加入通道..."
    peer channel join -b mychannel.block
    
    # 更新锚节点
    echo "更新锚节点..."
    peer channel update -o fabric-orderer:7050 -c mychannel -f /etc/hyperledger/fabric/channel-artifacts/Org1MSPanchors.tx --tls --cafile /etc/hyperledger/fabric/tls/ca.crt
    
    echo "网络初始化完成"
  
  # 链码部署脚本
  deploy-chaincode.sh: |
    #!/bin/bash
    set -e
    
    CHAINCODE_NAME=${1:-basic}
    CHAINCODE_VERSION=${2:-1.0}
    CHANNEL_NAME=${3:-mychannel}
    
    echo "部署链码 $CHAINCODE_NAME 版本 $CHAINCODE_VERSION 到通道 $CHANNEL_NAME"
    
    # 打包链码
    echo "打包链码..."
    peer lifecycle chaincode package ${CHAINCODE_NAME}.tar.gz --path /opt/gopath/src/github.com/chaincode/${CHAINCODE_NAME} --lang golang --label ${CHAINCODE_NAME}_${CHAINCODE_VERSION}
    
    # 安装链码
    echo "安装链码..."
    peer lifecycle chaincode install ${CHAINCODE_NAME}.tar.gz
    
    # 获取包ID
    PACKAGE_ID=$(peer lifecycle chaincode queryinstalled --output json | jq -r '.installed_chaincodes[] | select(.label=="'${CHAINCODE_NAME}_${CHAINCODE_VERSION}'") | .package_id')
    echo "链码包ID: $PACKAGE_ID"
    
    # 批准链码定义
    echo "批准链码定义..."
    peer lifecycle chaincode approveformyorg -o fabric-orderer:7050 --channelID $CHANNEL_NAME --name $CHAINCODE_NAME --version $CHAINCODE_VERSION --package-id $PACKAGE_ID --sequence 1 --tls --cafile /etc/hyperledger/fabric/tls/ca.crt
    
    # 检查提交就绪状态
    echo "检查提交就绪状态..."
    peer lifecycle chaincode checkcommitreadiness --channelID $CHANNEL_NAME --name $CHAINCODE_NAME --version $CHAINCODE_VERSION --sequence 1 --tls --cafile /etc/hyperledger/fabric/tls/ca.crt --output json
    
    # 提交链码定义
    echo "提交链码定义..."
    peer lifecycle chaincode commit -o fabric-orderer:7050 --channelID $CHANNEL_NAME --name $CHAINCODE_NAME --version $CHAINCODE_VERSION --sequence 1 --tls --cafile /etc/hyperledger/fabric/tls/ca.crt --peerAddresses fabric-peer-org1:7051 --tlsRootCertFiles /etc/hyperledger/fabric/tls/ca.crt --peerAddresses fabric-peer-org2:9051 --tlsRootCertFiles /etc/hyperledger/fabric/tls/ca.crt
    
    # 初始化链码
    echo "初始化链码..."
    peer chaincode invoke -o fabric-orderer:7050 --tls --cafile /etc/hyperledger/fabric/tls/ca.crt -C $CHANNEL_NAME -n $CHAINCODE_NAME --peerAddresses fabric-peer-org1:7051 --tlsRootCertFiles /etc/hyperledger/fabric/tls/ca.crt --peerAddresses fabric-peer-org2:9051 --tlsRootCertFiles /etc/hyperledger/fabric/tls/ca.crt -c '{"function":"InitLedger","Args":[]}'
    
    echo "链码部署完成"
  
  # 健康检查脚本
  health-check.sh: |
    #!/bin/bash
    
    # 检查 Peer 健康状态
    check_peer_health() {
        local peer_address=$1
        echo "检查 Peer 健康状态: $peer_address"
        
        # 检查 Peer 版本
        peer version
        
        # 检查通道列表
        peer channel list
        
        # 检查已安装的链码
        peer lifecycle chaincode queryinstalled
        
        # 检查已提交的链码
        peer lifecycle chaincode querycommitted -C mychannel
    }
    
    # 检查 CA 健康状态
    check_ca_health() {
        local ca_url=$1
        echo "检查 CA 健康状态: $ca_url"
        
        # 检查 CA 服务状态
        curl -k $ca_url/cainfo
    }
    
    # 执行健康检查
    echo "开始 Fabric 网络健康检查..."
    
    # 检查当前 Peer
    check_peer_health
    
    echo "Fabric 网络健康检查完成"
  
  # 性能测试脚本
  performance-test.sh: |
    #!/bin/bash
    
    CHANNEL_NAME=${1:-mychannel}
    CHAINCODE_NAME=${2:-basic}
    ITERATIONS=${3:-100}
    
    echo "开始性能测试: $ITERATIONS 次交易"
    
    start_time=$(date +%s)
    
    for i in $(seq 1 $ITERATIONS); do
        # 创建测试医疗记录
        peer chaincode invoke -o fabric-orderer:7050 --tls --cafile /etc/hyperledger/fabric/tls/ca.crt -C $CHANNEL_NAME -n $CHAINCODE_NAME --peerAddresses fabric-peer-org1:7051 --tlsRootCertFiles /etc/hyperledger/fabric/tls/ca.crt -c '{"function":"CreateMedicalRecord","Args":["record'$i'","patient'$i'","doctor'$i'","test data '$i'","hash'$i'"]}' > /dev/null
        
        if [ $((i % 10)) -eq 0 ]; then
            echo "已完成 $i 次交易"
        fi
    done
    
    end_time=$(date +%s)
    duration=$((end_time - start_time))
    tps=$(echo "scale=2; $ITERATIONS / $duration" | bc)
    
    echo "性能测试完成:"
    echo "总交易数: $ITERATIONS"
    echo "总耗时: ${duration}s"
    echo "TPS: $tps"