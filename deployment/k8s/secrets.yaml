# Kubernetes密钥配置
# 注意：在生产环境中，请使用kubectl create secret命令或外部密钥管理系统
apiVersion: v1
kind: Secret
metadata:
  name: emr-database-secret
  namespace: emr-namespace
  labels:
    app: blockchain-emr
    component: database
type: Opaque
data:
  # 以下值需要base64编码
  # echo -n 'your-password' | base64
  MYSQL_ROOT_PASSWORD: cGFzc3dvcmQ=  # password
  MYSQL_PASSWORD: cGFzc3dvcmQ=       # password
  MYSQL_USER: ZW1yX3VzZXI=           # emr_user
  MYSQL_DATABASE: ZW1yX2Jsb2NrY2hhaW4= # emr_blockchain
---
apiVersion: v1
kind: Secret
metadata:
  name: emr-app-secret
  namespace: emr-namespace
  labels:
    app: blockchain-emr
    component: application
type: Opaque
data:
  # JWT密钥 (请在生产环境中生成强密钥)
  JWT_SECRET: eW91ci1zdXBlci1zZWNyZXQtand0LWtleS1jaGFuZ2UtdGhpcy1pbi1wcm9kdWN0aW9u # your-super-secret-jwt-key-change-this-in-production
  # 数据库连接URL
  MYSQL_URL: bXlzcWw6Ly9lbXJfdXNlcjpwYXNzd29yZEBteXNxbC1zZXJ2aWNlOjMzMDYvZW1yX2Jsb2NrY2hhaW4= # mysql://emr_user:password@mysql-service:3306/emr_blockchain
---
apiVersion: v1
kind: Secret
metadata:
  name: emr-ssl-secret
  namespace: emr-namespace
  labels:
    app: blockchain-emr
    component: ssl
type: kubernetes.io/tls
data:
  # SSL证书和私钥 (需要实际的证书文件)
  # 使用以下命令生成：
  # kubectl create secret tls emr-ssl-secret --cert=path/to/cert.crt --key=path/to/cert.key -n emr-namespace
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t # 占位符，需要替换为实际证书
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t # 占位符，需要替换为实际私钥
---
apiVersion: v1
kind: Secret
metadata:
  name: emr-fabric-secret
  namespace: emr-namespace
  labels:
    app: blockchain-emr
    component: fabric
type: Opaque
data:
  # Hyperledger Fabric配置
  FABRIC_MSP_ID: T3JnMU1TUA==           # Org1MSP
  FABRIC_CHANNEL_NAME: bXljaGFubmVs     # mychannel
  FABRIC_CHAINCODE_NAME: ZW1yLWNoYWluY29kZQ== # emr-chaincode
---
# ConfigMap用于非敏感配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: emr-config
  namespace: emr-namespace
  labels:
    app: blockchain-emr
    component: config
data:
  NODE_ENV: "production"
  PORT: "3001"
  FRONTEND_PORT: "3004"
  JWT_EXPIRES_IN: "24h"
  CACHE_TTL: "3600"
  DOMAIN: "emr.example.com"
  IPFS_URL: "http://ipfs-service:5001"
  FABRIC_WALLET_PATH: "./wallet"
  FABRIC_CONNECTION_PROFILE: "./connection-org1.json"
  SMS_VERIFICATION_CODE: "123456"
  # 日志配置
  LOG_LEVEL: "info"
  LOG_FORMAT: "json"
  # 性能配置
  MAX_FILE_SIZE: "10485760"
  REQUEST_TIMEOUT: "30000"
  # 安全配置
  RATE_LIMIT_WINDOW: "900000"
  RATE_LIMIT_MAX: "100"
  # 数据库配置
  MYSQL_HOST: "mysql-service"
  MYSQL_PORT: "3306"
  # Redis配置
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
---
# 用于存储Fabric连接配置的ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: emr-fabric-config
  namespace: emr-namespace
  labels:
    app: blockchain-emr
    component: fabric
data:
  connection-org1.json: |
    {
      "name": "test-network-org1",
      "version": "1.0.0",
      "client": {
        "organization": "Org1",
        "connection": {
          "timeout": {
            "peer": {
              "endorser": "300"
            }
          }
        }
      },
      "organizations": {
        "Org1": {
          "mspid": "Org1MSP",
          "peers": ["peer0.org1.example.com"]
        }
      },
      "peers": {
        "peer0.org1.example.com": {
          "url": "grpcs://peer0.org1.example.com:7051",
          "tlsCACerts": {
            "pem": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n"
          },
          "grpcOptions": {
            "ssl-target-name-override": "peer0.org1.example.com",
            "hostnameOverride": "peer0.org1.example.com"
          }
        }
      }
    }