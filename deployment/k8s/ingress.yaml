# Nginx Ingress配置
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: emr-ingress
  namespace: emr-namespace
  labels:
    app: blockchain-emr
    component: ingress
  annotations:
    # Nginx Ingress Controller配置
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # SSL配置
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-SHA256,ECDHE-RSA-AES256-SHA384"
    
    # 安全头
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header X-Frame-Options DENY always;
      add_header X-Content-Type-Options nosniff always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # 限流配置
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    
    # 代理配置
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    
    # WebSocket支持
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    
    # 负载均衡
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
spec:
  tls:
  - hosts:
    - emr.example.com
    secretName: emr-tls-secret
  rules:
  - host: emr.example.com
    http:
      paths:
      # API路由到后端
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 3001
      # WebSocket路由
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 3001
      # 健康检查
      - path: /health
        pathType: Exact
        backend:
          service:
            name: backend-service
            port:
              number: 3001
      # 前端静态文件（默认路由）
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 3004
---
# API专用Ingress（可选，用于API版本控制）
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: emr-api-ingress
  namespace: emr-namespace
  labels:
    app: blockchain-emr
    component: api-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # API特定限流
    nginx.ingress.kubernetes.io/rate-limit: "200"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # API认证限流
    nginx.ingress.kubernetes.io/server-snippet: |
      location /api/v1/auth/login {
        limit_req zone=login burst=5 nodelay;
        proxy_pass http://upstream_balancer;
      }
    
    # CORS配置
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://emr.example.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  tls:
  - hosts:
    - api.emr.example.com
    secretName: emr-api-tls-secret
  rules:
  - host: api.emr.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 3001
---
# Let's Encrypt ClusterIssuer
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  labels:
    app: blockchain-emr
    component: cert-manager
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@emr.example.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
---
# Let's Encrypt Staging ClusterIssuer（用于测试）
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  labels:
    app: blockchain-emr
    component: cert-manager
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: admin@emr.example.com
    privateKeySecretRef:
      name: letsencrypt-staging
    solvers:
    - http01:
        ingress:
          class: nginx
---
# Nginx配置ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-ingress-config
  namespace: emr-namespace
  labels:
    app: blockchain-emr
    component: nginx-config
data:
  # 自定义nginx配置
  proxy-connect-timeout: "30"
  proxy-send-timeout: "30"
  proxy-read-timeout: "30"
  proxy-body-size: "10m"
  
  # 限流配置
  limit-req-zone: "$binary_remote_addr zone=login:10m rate=5r/m"
  
  # SSL配置
  ssl-protocols: "TLSv1.2 TLSv1.3"
  ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384"
  ssl-prefer-server-ciphers: "off"
  
  # 性能优化
  worker-processes: "auto"
  worker-connections: "1024"
  keepalive-timeout: "65"
  
  # 日志格式
  log-format-upstream: '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time [$proxy_upstream_name] [$proxy_alternative_upstream_name] $upstream_addr $upstream_response_length $upstream_response_time $upstream_status $req_id'
  
  # 自定义错误页面
  custom-http-errors: "404,503"
---
# 网络策略 - Ingress流量
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: emr-ingress-network-policy
  namespace: emr-namespace
  labels:
    app: blockchain-emr
    component: network-policy
spec:
  podSelector:
    matchLabels:
      app: blockchain-emr
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3001
    - protocol: TCP
      port: 3004
  - from: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443