# Docker Compose配置文件
# 用于本地开发和测试环境
version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: emr-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD:-password}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-emr_blockchain}
      MYSQL_USER: ${MYSQL_USER:-emr_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - emr-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # IPFS节点
  ipfs:
    image: ipfs/kubo:latest
    container_name: emr-ipfs
    restart: unless-stopped
    ports:
      - "4001:4001"  # P2P
      - "5001:5001"  # API
      - "8080:8080"  # Gateway
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - emr-network
    environment:
      - IPFS_PROFILE=server
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5001/api/v0/version"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端服务
  backend:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.backend
    container_name: emr-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=${MYSQL_USER:-emr_user}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-password}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-emr_blockchain}
      - MYSQL_URL=mysql://${MYSQL_USER:-emr_user}:${MYSQL_PASSWORD:-password}@mysql:3306/${MYSQL_DATABASE:-emr_blockchain}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - JWT_EXPIRES_IN=24h
      - IPFS_URL=http://ipfs:5001
      - FABRIC_CHANNEL_NAME=mychannel
      - FABRIC_CHAINCODE_NAME=emr-chaincode
      - FABRIC_MSP_ID=Org1MSP
      - FABRIC_WALLET_PATH=./wallet
      - FABRIC_CONNECTION_PROFILE=./connection-org1.json
    volumes:
      - backend_logs:/app/logs
      - backend_wallet:/app/wallet
    networks:
      - emr-network
    depends_on:
      mysql:
        condition: service_healthy
      ipfs:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务
  frontend:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.frontend
    container_name: emr-frontend
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:3001/api/v1
      - REACT_APP_WS_URL=ws://localhost:3001
    networks:
      - emr-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:1.25-alpine
    container_name: emr-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../ssl:/etc/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - emr-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存（可选）
  redis:
    image: redis:7-alpine
    container_name: emr-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - emr-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local
  ipfs_data:
    driver: local
  backend_logs:
    driver: local
  backend_wallet:
    driver: local
  nginx_logs:
    driver: local
  redis_data:
    driver: local

networks:
  emr-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16